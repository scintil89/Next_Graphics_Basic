#version 330

struct LightSource
{
	vec3 ambient_color;
	vec3 diffuse_color;
	vec3 specular_color;
	vec3 position;
};

struct Material
{
	vec3 ambient_color;
	vec3 diffuse_color;
	vec3 specular_color;
	float specular_shininess;
};


uniform LightSource light;
uniform Material material;

in vec3 vertexNormal;
in vec3 eyeDir;
in vec3 lightDir;

out vec4 color;

void main()
{
	vec3 E = normalize(eyeDir);
	vec3 N = normalize(vertexNormal);
	vec3 L = normalize(lightDir);

	vec3 H = normalize( E + L );

	vec3 ambient = vec3(0);	
	vec3 diffuse = vec3(0);
	vec3 specular = vec3(0);

	ambient += light.ambient.color;
	diffuse += light.diffuse.color * max(dot(L, N), 0);
	specular += light.specular.color * pow(max(dot(H, N), 0), material.specular_shininess);

	ambient += material.ambient.color;
	diffuse += material.diffuse.color;
	specular += material.specular.color;
	
	color = vec4(1.0, 0.0, 0.0); //vec4(ambient + diffuse + specular, 1.0);	
}